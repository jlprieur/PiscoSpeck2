/*+++++++++++++++++++++++++++++
.TYPE           Header
.NAME           computer.h
.LANGUAGE       C
.AUTHOR         ESO -- IPG
.CATEGORY       Computer-dependant constants
.COMMENTS       This module includes constants depending on the computer:
                number of bits per char,
                byte swapping, description of floating-point numbers. 
                Limits also provided for each type of atomic data.
                NULL numbers are also defined via isNULL (test) and
                toNULL
                ********* Generated by computer.c program **************
.ENVIRON        UNIX and VAX/VMS
.VERSION        1.1     18-Jan-1991 (check Floating Pattern)
-----------------------*/

#ifndef BITSPERBYTE

#define BITSPERBYTE     8
#define BITS(type)      (BITSPERBYTE*((int)sizeof(type)))

#define ONES_COMP       1
#define TWOS_COMP       2

#define IEEEFLOAT       0
#define VAXFLOAT        1
#define VAXGFLOAT       2
#define HPFLOAT         3

#define INTFMT          2       /* 2's Complement Integers */

#define MAXIO1          (512*90)


#define SWAPINT         SWAPLONG
#define MAXINT          MAXLONG
#define MININT          MINLONG
#define MAXUINT         MAXULONG
#define isNULLINT       isNULLLONG
#define toNULLINT       toNULLLONG
/* Hexa pattern of -1.e0 (float)BF800000 (double)00000000 BFF00000 */
/* Hexa pattern of  1.e0 (float)3F800000 (double)00000000 3FF00000 */
/* Hexa pattern of  2.e0 (float)40000000 (double)00000000 40000000 */
/* Hexa pattern of  .5e0 (float)3F000000 (double)00000000 3FE00000 */
/* Hexa pattern of .25e0 (float)3E800000 (double)00000000 3FD00000 */
/* Hexa pattern of.125e0 (float)3E000000 (double)00000000 3FC00000 */

#define SWAPSHORT       21
#define SWAPLONG        4321
/*(float)  l2e=-23      Hexa pattern=3F800001, 3F800002 */
/*(double) l2f=-52      Hexa pattern=00000001 3FF00000, 00000002 3FF00000 */
/*(float)  i=4 l2e=-23  Hexa pattern=3F800004   */
/*(float)  i=3 l2e=-15  Hexa pattern=3F800304   */
/*(float)  i=2 l2e=-7   Hexa pattern=3F820304   */
/*(double) i=8 l2f=-52  Hexa pattern=00000008 3FF00000  */
/*(double) i=7 l2f=-44  Hexa pattern=00000708 3FF00000  */
/*(double) i=6 l2f=-36  Hexa pattern=00060708 3FF00000  */
/*(double) i=5 l2f=-28  Hexa pattern=05060708 3FF00000  */
/*(double) i=4 l2f=-20  Hexa pattern=05060708 3FF00004  */
/*(double) i=3 l2f=-12  Hexa pattern=05060708 3FF00304  */
/*(double) i=2 l2f=-4   Hexa pattern=05060708 3FF20304  */
#define SWAPFLOAT       4321
#define SWAPDOUBLE      87654321

#define MINCHAR         ((char) (1  << (BITS(char)  - 1)))
#define MINSHORT        ((short)(1  << (BITS(short) - 1)))
#define MINLONG         (       (1L << (BITS(long)  - 1)))

#define MAXCHAR         ((char) (~MINCHAR ))
#define MAXSHORT        ((short)(~MINSHORT))
#define MAXLONG         (        ~MINLONG )

#define MAXUCHAR        ((unsigned char) (MINCHAR | MAXCHAR ))
#define MAXUSHORT       ((unsigned short)(MINSHORT| MAXSHORT))
#define MAXULONG        ((unsigned long) (MINLONG | MAXLONG ))


/* Edited floating-point NULL number is +NAN */
/* Edited floating-point NULL number is +NAN */
/*        Ratio is       NULL  ?     is +NAN */

#define _IEEE           1       /* NULL edited as +NAN */
#define _HIDDENBIT      1
#define _EXPBASE        2

#define _FEXPLEN        8
#define FMASKSGM        0x80000000
#define FMASKEXP        0x7F800000
#define FMASKMAN        0x007FFFFF

#define MAXFLOAT        ((float)3.40282346638528860e+38)
#define MINFLOAT        ((float)1.40129846432481707e-45)

/*      ==== Double Precision Numbers ====*/
/* Hexa pattern of -1.e0: 00000000 BFF00000*/ 
/* Hexa pattern of  1.e0: 00000000 3FF00000*/ 
/* Hexa pattern of  2.e0: 00000000 40000000*/ 
/* Hexa pattern of  .5e0: 00000000 3FE00000*/ 
/* Hexa pattern of .25e0: 00000000 3FD00000*/ 
/* Hexa pattern of.125e0: 00000000 3FC00000*/ 
#define _DEXPLEN        11
#define DLONGEXP        1       /* Exponent is in longword #1 */
#define DMASKSGM        0x80000000
#define DMASKEXP        0x7FF00000
#define DMASKMAN        0x000FFFFF

#define MAXDOUBLE       1.79769313486231166e+308
#define MINDOUBLE       4.94065645841246544e-324

/*       Definition of NULL's   */

#define asaULONG(x)     (unsigned long *)(&(x))

#define NULL1           (MINCHAR)
#define NULL2           (MINSHORT)
#define NULL4           (MINLONG)

#define isNULLSHORT(x)  ((short)(x) == MINSHORT)
#define toNULLSHORT(x)  x = MINSHORT

#define isNULLLONG(x)   ((long)(x) == MINLONG)
#define toNULLLONG(x)   x = MINLONG

/*       Use -Inf as NULL for IEEE fp   */

#define NULLF           (FMASKSGM | FMASKEXP)
#define isNULLFLOAT(x)  (*asaULONG(x) == NULLF)
#define toNULLFLOAT(x)   *asaULONG(x) = NULLF
#define NULLD           (DMASKSGM | DMASKEXP)
#define isNULLDOUBLE(x) ((*(asaULONG(x)+DLONGEXP) == NULLD) &&  \
                         (*(asaULONG(x)+(DLONGEXP^1)) == 0))
#define toNULLDOUBLE(x) *(asaULONG(x)+DLONGEXP) = NULLD, \
                         *(asaULONG(x)+(DLONGEXP^1)) = 0

#define FSIGNIF         (BITS(float)  - _FEXPLEN + _HIDDENBIT - 1)
#define DSIGNIF         (BITS(double) - _DEXPLEN + _HIDDENBIT - 1)
#define FMAXEXP         ((1 << (_FEXPLEN - 1)) - 1 + _IEEE)
#define DMAXEXP         ((1 << (_DEXPLEN - 1)) - 1 + _IEEE)


#define FLOATFMT        IEEEFLOAT

#endif
